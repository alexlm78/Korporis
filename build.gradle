plugins {
    id 'java'
    id 'io.quarkus'
    id 'com.diffplug.spotless' version '8.0.0'
}

repositories {
    mavenCentral()
    mavenLocal()
}

dependencies {
    implementation 'io.quarkiverse.jdbc:quarkus-jdbc-sqlite:3.0.7'
    implementation enforcedPlatform("${quarkusPlatformGroupId}:${quarkusPlatformArtifactId}:${quarkusPlatformVersion}")
    implementation 'io.quarkus:quarkus-hibernate-validator'
    implementation 'io.quarkus:quarkus-resteasy-jsonb'
    implementation 'io.quarkus:quarkus-hibernate-orm-panache'
    implementation 'io.quarkus:quarkus-resteasy'
    implementation 'io.quarkus:quarkus-jdbc-mysql'
    implementation 'io.quarkus:quarkus-arc'
    implementation 'io.quarkus:quarkus-hibernate-orm'
    
    testImplementation 'io.quarkus:quarkus-junit5'
    testImplementation 'io.rest-assured:rest-assured'
}

group 'dev.kreaker'
version '0.1.0'

java {
    sourceCompatibility = JavaVersion.VERSION_21
    targetCompatibility = JavaVersion.VERSION_21
}

test {
    systemProperty "java.util.logging.manager", "org.jboss.logmanager.LogManager"
}
compileJava {
    options.encoding = 'UTF-8'
    options.compilerArgs << '-parameters'
}

compileTestJava {
    options.encoding = 'UTF-8'
}

spotless {
    java {
        target '**/*.java'
        targetExclude '**/build/**', '**/.gradle/**', 'out/**'

        googleJavaFormat('1.24.0').aosp()
        trimTrailingWhitespace()
        endWithNewline()
        leadingTabsToSpaces(4)

        custom 'noWildcardImports', {
            if (it.contains('import .*\\*')) {
                throw new RuntimeException('No use wildcard imports')
            }
        }

        custom 'enforceUtf8', {
            return new String(it.getBytes('UTF-8'), 'UTF-8')
        }
    }

    format 'properties', {
        target '**/*.properties'
        targetExclude '**/build/**', '**/.gradle/**', 'out/**'

        trimTrailingWhitespace()
        endWithNewline()
        leadingTabsToSpaces(2)

        // Sort properties alphabetically
        custom 'sortProperties', { content ->
            def lines = content.readLines()
            def result = []
            def commentBlock = []
            def propBlock = []

            lines.each { line ->
                def trimmed = line.trim()
                if (trimmed.startsWith('#') || trimmed.isEmpty()) {
                    if (!propBlock.isEmpty()) {
                        result.addAll(propBlock.sort { a, b ->
                            def keyA = a.split('=')[0].trim()
                            def keyB = b.split('=')[0].trim()
                            return keyA.compareToIgnoreCase(keyB)
                        })
                        propBlock.clear()
                    }
                    result.add(line)
                } else {
                    propBlock.add(line)
                }
            }

            if (!propBlock.isEmpty()) {
                result.addAll(propBlock.sort { a, b ->
                    def keyA = a.split('=')[0].trim()
                    def keyB = b.split('=')[0].trim()
                    return keyA.compareToIgnoreCase(keyB)
                })
            }

            return result.join('\n')
        }
    }

    // YAML files (Spring Boot configs)
    format 'yaml', {
        target '**/*.yml', '**/*.yaml'
        targetExclude '**/build/**'

        trimTrailingWhitespace()
        endWithNewline()
        leadingTabsToSpaces(2)
    }

    // XML files (Maven, Spring configs)
    format 'xml', {
        target '**/*.xml'
        targetExclude '**/build/**'

        eclipseWtp('xml')
        trimTrailingWhitespace()
        endWithNewline()
        leadingTabsToSpaces(2)
    }

    // Additional formats
    format 'misc', {
        target '**/*.md', '**/*.gitignore'
        trimTrailingWhitespace()
        endWithNewline()
        leadingTabsToSpaces(3)
    }
}

// Custom tasks for IDE integration
tasks.register('formatJava') {
    group 'formatting'
    description 'Format only Java files'
    doLast {
        exec {
            commandLine './gradlew', 'spotlessJavaApply'
        }
    }
}

tasks.register('formatProperties') {
    group 'formatting'
    description 'Format only Properties files'
    doLast {
        exec {
            commandLine './gradlew', 'spotlessPropertiesApply'
        }
    }
}

tasks.register('formatAll') {
    group 'formatting'
    description 'Format all supported files'
    dependsOn 'spotlessApply'
}
